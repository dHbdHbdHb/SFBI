"Elec- Commercial",
"Elec- Residential",
"Gas- Commercial",
"Gas- Residential"
)
) %>%
group_by(
MONTH,
YEAR,
CUSTOMERCLASS
) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm = T)
) %>%
mutate(
DATE =
paste(
YEAR,
MONTH,
"01",
sep="-"
) %>% as.Date()
)
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf()
saveRDS(smc_places, "smc_places.rds")
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T)) %>% select(PLACEFP) %>%
st_as_sf()
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf() %>%
saveRDS("smc_places.rds")
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf() %>%
saveRDS("smc_places.rds")
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf() %>%
saveRDS("smc_places.rds")
saveRDS(smc_places,"smc_places.rds")
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf()
saveRDS(smc_places, "smc_places.rds")
smc_places <- readRDS("smc_places.rds")
smc_places <- places("CA", cb = T) %>%
st_centroid() %>%
.[counties("CA") %>% filter(NAME == "San Mateo"),] %>%
st_drop_geometry() %>%
left_join(places("CA", cb = T) %>% select(PLACEFP)) %>%
st_as_sf()
saveRDS(smc_places,"smc_places.rds")
smc_cbgs <- block_groups("CA","San Mateo", cb = T)
saveRDS(smc_cbgs, "smc_cbgs.rds")
smc_cbgs <- readRDS("smc_cbgs.rds")
knitr::opts_chunk$set(echo = TRUE)
library(remotes)
install_github("yonghah/esri2sf")
library(tidyverse)
library(sf)
library(leaflet)
library(mapboxapi)
library(tigris)
library(jsonlite)
library(esri2sf)
library(jsonlite)
rm(bay_zips)
rm(pge_data)
rm(pge_data_raw)
rm(smc_cbgs)
rm(smc_places)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names) %>%
st_transform(4326)
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names) %>%
st_transform(4326)
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names) %>%
st_transform(4326)
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
library(remotes)
install_github("yonghah/esri2sf")
library(tidyverse)
library(sf)
library(leaflet)
library(mapboxapi)
library(tigris)
library(jsonlite)
library(esri2sf)
library(jsonlite)
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names) %>%
st_transform(4326)
sf_cbgs <- block_groups("CA","San Francisco", cb = T, progress_bar = F) %>%
st_transform(4326)
pa_api <- "4CDE9DCD-A0AB-11EC-B9BF-42010A800003"
json <- fromJSON(paste0(
"https://api.purpleair.com/v1/sensors?api_key=",
pa_api,
"&fields=name,location_type,latitude,longitude,pm2.5_1week,temperature,humidity,primary_id_a,primary_key_a,secondary_id_a,secondary_key_a,primary_id_b,primary_key_b,secondary_id_b,secondary_key_b"
))
all_sensors <- json %>%
.$data %>%
as.data.frame() %>%
set_names(json$fields) %>%
filter(
!is.na(longitude),
!is.na(latitude)
) %>%
st_as_sf(coords = c("longitude","latitude"), crs = 4326) %>%
mutate(location_type = ifelse(
location_type == 0,
"outside",
"inside"
))
?st_union
bay_sensors <-
all_sensors %>%
.[bay_counties, ]
bay_sensors_clean <- bay_sensors %>%
filter(
!is.na(pm2.5_1week),
!is.na(humidity)
) %>%
mutate(
PM25 = 0.524*as.numeric(pm2.5_1week) - 0.0852*as.numeric(humidity) + 5.72,
AQI = case_when(
PM25 <= 12 ~
paste(round(50/12*PM25), "Good"),
PM25 <= 35.4 ~
paste(round((100-51)/(35.4-12)*(PM25 - 12) + 51), "Moderate"),
PM25 <= 55.4 ~
paste(round((150-101)/(55.4-35.4)*(PM25 - 35.4) + 101), "Moderately Unhealthy"),
PM25 <= 150.4 ~
paste(round((200-151)/(150.4-55.4)*(PM25 - 55.4) + 151), "Unhealthy"),
PM25 <= 250.4 ~
paste(round((300-201)/(250.4-150.4)*(PM25 - 150.4) + 201), "Very Unhealthy"),
TRUE ~
paste(round((500-301)/(500.4-250.5)*(PM25 - 250.5) + 301), "Hazardous")
)
) %>%
separate(
AQI,
into = c("AQI","AQI_Cat"),
sep = " ",
extra = "merge"
) %>%
mutate(
AQI = as.numeric(AQI),
AQI_Cat = AQI_Cat %>% factor(levels = c("Good", "Moderate","Moderately Unhealthy","Unhealthy","Very Unhealthy","Hazardous"))
)
aqi_pal <- colorFactor(
palette = "RdYlGn",
reverse = T,
domain = bay_sensors_clean$AQI_Cat
)
bay_sensors_clean %>%
filter(location_type == "outside") %>%
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~aqi_pal(AQI_Cat),
label = ~AQI_Cat,
radius = 5,
opacity = 0.75
) %>%
addLegend(
pal = aqi_pal,
values = ~AQI_Cat
)
aqi_pal2 <- colorQuantile(
palette = "RdYlGn",
reverse = T,
domain = bay_sensors_clean$AQI,
n = 5
)
bay_sensors_clean %>%
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addCircleMarkers(
color = ~aqi_pal2(AQI),
label = ~paste0(AQI,", ",AQI_Cat),
radius = 5,
opacity = 0.75
) %>%
addLegend(
pal = aqi_pal2,
values = ~AQI
)
bay_pm25_voronoi <-
bay_sensors_clean %>%
filter(location_type == "outside") %>%
st_union() %>%
st_voronoi() %>%
st_cast() %>%
st_as_sf() %>%
st_intersection(.,st_union(bay_counties)) %>%
st_join(bay_sensors_clean %>% filter(location_type == "outside"))
ggplot(bay_pm25_voronoi) + geom_sf()
?st_cast
?st_voronoi
sf_pm25_voronoi_cbg <-
bay_pm25_voronoi %>%
st_intersection(sf_cbgs) %>%
st_make_valid() %>%
mutate(
area = st_area(.) %>% as.numeric()
) %>%
st_drop_geometry() %>%
group_by(GEOID) %>%
summarize(
PM25 = weighted.mean(PM25, area, na.rm = T)
) %>%
left_join(sf_cbgs %>% dplyr::select(GEOID)) %>%
st_as_sf()
sf_sensors <-
bay_sensors_clean %>%
filter(location_type == "outside") %>%
.[sf_cbgs, ]
pm25_pal <- colorNumeric(
palette = "RdYlGn",
reverse = T,
domain = c(
sf_pm25_voronoi_cbg$PM25,
sf_sensors$PM25
)
)
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
data = sf_pm25_voronoi_cbg %>%
filter(GEOID != "060759804011"), # Farallon Islands
fillColor = ~pm25_pal(PM25),
fillOpacity = 0.5,
color = "white",
weight = 0.5,
label = ~PM25,
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addCircleMarkers(
data = sf_sensors,
fillColor = ~pm25_pal(PM25),
fillOpacity = 1,
color = "black",
weight = 0.5,
radius = 5,
label = ~PM25
) %>%
addLegend(
pal = pm25_pal,
values = c(
sf_pm25_voronoi_cbg$PM25,
sf_sensors$PM25
)
)
stanford_boundary <- places("CA", cb = T) %>%
filter(NAME == "Stanford") %>%
st_transform(4326)
stanford_sensors <- bay_sensors_clean %>%
.[stanford_boundary,]
start <- "2021-11-28%2000:08:00"
end <- "2021-12-05%2000:08:00"
stanford_sensor_data <-
1:nrow(stanford_sensors) %>%
map_dfr(function(row){
print(paste0(row,". ",stanford_sensors[row,]$sensor_index))
a1 <- read_csv(paste0(
"https://api.thingspeak.com/channels/",
stanford_sensors[row,]$primary_id_a,
"/feeds.csv?api_key=",
stanford_sensors[row,]$primary_key_a,
"&average=1440&round=3&start=",start,
"&end=", end,
"&timezone=America/Los_Angeles"
), show_col_types = F) %>%
set_names(c("created_at","PM1.0_CF_1_ug/m3_A","PM2.5_CF_1_ug/m3_A","PM10.0_CF_1_ug/m3_A","Uptime_Minutes_A","RSSI_dbm_A","Temperature_F_A","Humidity_%_A","PM2.5_CF_ATM_ug/m3_A"))
a2 <- read_csv(paste0(
"https://api.thingspeak.com/channels/",
stanford_sensors[row,]$secondary_id_a,
"/feeds.csv?api_key=",
stanford_sensors[row,]$secondary_key_a,
"&average=1440&round=3&start=",start,
"&end=", end,
"&timezone=America/Los_Angeles"
), show_col_types = F) %>%
set_names(c("created_at","0.3um/dl_A","0.5um/dl_A","1.0um/dl_A","2.5um/dl_A","5.0um/dl_A","10.0um/dl_A","PM1.0_CF_ATM_ug/m3_A","PM10_CF_ATM_ug/m3_A"))
b1 <- read_csv(paste0(
"https://api.thingspeak.com/channels/",
stanford_sensors[row,]$primary_id_b,
"/feeds.csv?api_key=",
stanford_sensors[row,]$primary_key_b,
"&average=1440&round=3&start=",start,
"&end=", end,
"&timezone=America/Los_Angeles"
), show_col_types = F) %>%
set_names(c("created_at","PM1.0_CF_1_ug/m3_B","PM2.5_CF_1_ug/m3_B","PM10.0_CF_1_ug/m3_B","HEAP_B","ADC0_voltage_B","Atmos_Pres_B","Not_Used_B","PM2.5_CF_ATM_ug/m3_B"))
b2 <- read_csv(paste0(
"https://api.thingspeak.com/channels/",
stanford_sensors[row,]$secondary_id_b,
"/feeds.csv?api_key=",
stanford_sensors[row,]$secondary_key_b,
"&average=1440&round=3&start=",start,
"&end=", end,
"&timezone=America/Los_Angeles"
), show_col_types = F) %>%
set_names(c("created_at","0.3um/dl_B","0.5um/dl_B","1.0um/dl_B","2.5um/dl_B","5.0um/dl_B","10.0um/dl_B","PM1.0_CF_ATM_ug/m3_B","PM10_CF_ATM_ug/m3_B"))
combined <- a1 %>%
left_join(a2, by = "created_at") %>%
left_join(b1, by = "created_at") %>%
left_join(b2, by = "created_at") %>%
transmute(
date = as.Date(created_at),
ID = as.numeric(stanford_sensors[row,]$sensor_index),
Location = stanford_sensors[row,]$location_type,
PM25 = 0.524*as.numeric(`PM2.5_CF_1_ug/m3_A`) - 0.0852*as.numeric(`Humidity_%_A`) + 5.72
)
}) %>%
group_by(date, Location) %>%
summarize(
PM25 = mean(PM25, na.rm = T)
)
epa_sensor_data <- readRDS("epa_sensor_data.rds")
stanford_sensors %>%
# epa_sensor_data %>%
ggplot() +
geom_line(
aes(
x = date,
y = PM25,
color = Location
)
)
epa_sensor_data <- readRDS("epa_sensor_data.rds")
stanford_sensors %>%
ggplot() +
geom_line(
aes(
x = date,
y = PM25,
color = Location
)
)
View(stanford_sensors)
epa_sensor_data <- readRDS("epa_sensor_data.rds")
stanford_sensors %>%
ggplot() +
geom_line(
aes(
x = date,
y = PM25,
color = location_type
)
)
View(stanford_sensor_data)
epa_sensor_data <- readRDS("epa_sensor_data.rds")
stanford_sensor_data%>%
ggplot() +
geom_line(
aes(
x = date,
y = PM25,
color = Location
)
)
bay_sensors_clean <- bay_sensors %>%
filter(
!is.na(pm2.5_1week),
!is.na(humidity)
) %>%
mutate(
PM25 = 0.524*as.numeric(pm2.5_1week) - 0.0852*as.numeric(humidity) + 5.72,
AQI = case_when(
PM25 <= 12 ~
paste(round(50/12*PM25), "Good"),
PM25 <= 35.4 ~
paste(round((100-51)/(35.4-12)*(PM25 - 12) + 51), "Moderate"),
PM25 <= 55.4 ~
paste(round((150-101)/(55.4-35.4)*(PM25 - 35.4) + 101), "Moderately Unhealthy"),
PM25 <= 150.4 ~
paste(round((200-151)/(150.4-55.4)*(PM25 - 55.4) + 151), "Unhealthy"),
PM25 <= 250.4 ~
paste(round((300-201)/(250.4-150.4)*(PM25 - 150.4) + 201), "Very Unhealthy"),
TRUE ~
paste(round((500-301)/(500.4-250.5)*(PM25 - 250.5) + 301), "Hazardous")
)
) %>%
separate(
AQI,
into = c("AQI","AQI_Cat"),
sep = " ",
extra = "merge"
) %>%
mutate(
AQI = as.numeric(AQI),
AQI_Cat = AQI_Cat %>% factor(levels = c("Good", "Moderate","Moderately Unhealthy","Unhealthy","Very Unhealthy","Hazardous"))
)
View(bay_sensors_clean)
?st_voronoi
?st_cast
bay_pm25_voronoi <-
bay_sensors_clean %>%
filter(location_type == "outside") %>%
st_union() %>%
st_voronoi()
bay_pm25_voronoi <-
bay_sensors_clean %>%
filter(location_type == "outside") %>%
st_union() %>%
st_voronoi() %>%
st_cast() %>%
st_as_sf() %>%
st_intersection(.,st_union(bay_counties)) %>%
st_join(bay_sensors_clean %>% filter(location_type == "outside"))
ggplot(bay_pm25_voronoi) + geom_sf()
bay_pm25_voronoi <-
bay_sensors_clean %>%
filter(location_type == "outside") %>%
st_union() %>%
st_voronoi()
View(bay_sensors_clean)
View(bay_sensors_clean)
View(bay_sensors_clean)
View(smc_cbgs)
View(smc_cbgs.rds)
# smc_cbgs <- block_groups("CA","San Mateo", cb = T)
# saveRDS(smc_cbgs, "smc_cbgs.rds")
smc_cbgs <- readRDS("smc_cbgs.rds")
smc_cbgs <- readRDS("smc_cbgs.rds")
View(smc_cbgs)
selectInput(
inputId = "city",
label = "Jurisdiction:",
choices = c("",smc_places$NAME)
)
selectInput(
inputId = "city",
label = "Jurisdiction:",
choices = c("",smc_places$NAME)
)
Inputs {.sidebar}
-------------------------------------
selectInput(
inputId = "city",
label = "Jurisdiction:",
choices = c("",smc_places$NAME)
)
